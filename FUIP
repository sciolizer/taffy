First unique implication point:

void Solver.analyze(Constr confl, Vec<Lit> out_learnt, Int out_btlevel) {
  Vec<Bool> seen(nVars(), False)
  int counter = 0
  lit p = bottom (undefined?)
  Vec<Lit> p_reason

  out_learnt.push() // leave room for the asserting literal
  out_btlevel = 0
  do {
    p_reason.clear()
    confl.calcReason(this, p, p_reason) // invariant here: confl != NULL
    
    // Trace reason for p:
    for (int j = 0; j < p_reason.size(); j++) {
      lit q = p_reason[j]
      if (!seen[var(q)]) {
        seen[var(q)] = true
        if (level[var(q)] == decisionLevel()) {
          counter ++
        } else if (level[var(q)] > 0) {
          out_learnt.push(not q)
          out_btlevel = max(out_btlevel, level[var(q)])
        }
      }
    }

    // Select next literal to look at:
    do {
      p = trail.last()
      confl = reason[var(p)]
      undoOne()
    } while (!seen[var(p)])
    counter --
  } while (counter > 0)
  out_learnt[0] = not p
